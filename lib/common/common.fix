// Common functions such as `id` and `flip`.
module Minilib.Common.Common;

// `id` is an identity function.
id: a -> a;
id = |a| a;

// `const` is a constant function. It returns its first argument ignoring its second argument.
// ie. `const(a,b)` returns `a`.
// Note that `const(id)(a,b)` returns `b`, since `const(id)(a,b) = const(id,a)(b) = id(b) = b`.
const: a -> b -> a;
const = |a, b| a;

// `swap` is a function that swaps the first component and the second component of `Tuple2`.
// ie. `(a,b).swap` returns `(b, a)`.
swap: (a, b) -> (b, a);
swap = |(a, b)| (b, a);

// `flip(f)` swaps the first argument and the second argument.
flip: (a -> b -> c) -> (b -> a -> c);
flip = |f, b, a| f(a, b);

// `compose2` composes a two-argument function with a one-argument function.
compose2: (a -> b -> c) -> (c -> d) -> (a -> b -> d);
compose2 = |f, g, a, b| g(f(a, b));

// `apply(a, f)` is equal to `f(a)`.
// You can write it as `apply(a) $ f`, `a.apply $ f` or `f.apply(a)`.
apply: a -> (a -> b) -> b;
apply = |a, f| f(a);

// `pair(a,b)` returns `(a, b)`.
pair: a -> b -> (a, b);
pair = |a, b| (a, b);

// `curry` converts an uncurried function to a curried function.
curry: ((a, b) -> c) -> (a -> b -> c);
curry = |f, a, b| f((a, b));

// `uncurry` converts a curried function to an uncurried function.
uncurry: (a -> b -> c) -> ((a, b) -> c);
uncurry = |f, (a, b)| f(a, b);
