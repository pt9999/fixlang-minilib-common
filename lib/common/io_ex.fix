// Extensions for `Std::IO`.
module Minilib.Common.IOEx;

// Flushes a file stream.
// For details, see Linux manual page for [fflush()](https://man7.org/linux/man-pages/man3/fflush.3.html).
fflush : IOHandle -> IOFail ();
fflush = |handle| (
    clear_errno.lift;;
    let file_ptr = *handle.get_file_ptr.lift;
    let res = *FFI_CALL_IO[I32 fflush(Ptr), file_ptr].lift;
    if res < 0_I32 {
        throw("fflush failed!: errno=" + (*get_errno.lift).to_string)
    };
    pure()
);

// Sets IOHandle to unbuffered mode.
// For detials, see Linux manual page for [setbuf()](https://man7.org/linux/man-pages/man3/setbuf.3.html).
// NOTE: When a fix program is invoked by `run_with_stream()`,
//       then the stdout and stderr becomes not a TTY but a file stream.
//       So the stdout becomes block-buffered. The stderr also seems to be block-buffered.
set_unbuffered_mode: IOHandle -> IO ();
set_unbuffered_mode = |handle| (
    pure();;
    let file_ptr = *handle.get_file_ptr;
    FFI_CALL_IO[() setbuf(Ptr, Ptr), file_ptr, nullptr]
);

