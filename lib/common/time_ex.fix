// Timing module, such as sleep for a while, and measuring execution time.
module Minilib.Common.TimeEx;

import Time;

// Sleeps for specified micro-seconds.
// For details, see Linux manual page for [usleep()](https://man7.org/linux/man-pages/man3/usleep.3.html).
usleep: U32 -> IOFail ();
usleep = |usec| (
    pure();;    // make it lazy
    let res = *FFI_CALL_IO[I32 usleep(U32), usec].lift;
    if res == -1_I32 {
        throw("usleep failed!: some error occurred in usleep.")
    };
    pure()
);

// Measures wall-clock time per a function call.
// Specifically, It calls the function many times and measures the total time.
// It then prints the function result and measured time per loop.
// NOTE: The measured time per loop has a overhead about 0.1~1.0 usec.
timeit: [a: ToString] String -> (() -> a) -> IO a;
timeit = |label, f| (
    let io_a = do {
        pure();;    // make it lazy
        pure $ f()
    };
    timeit_io(label, io_a)
);

// Measures wall-clock time per an IO operation.
// Specifically, It performs an IO operation many times and measures the total time.
// It then prints the IO operation result and measured time per loop.
// NOTE: The measured time per loop has a overhead about 0.1~1.0 usec.
timeit_io: [a: ToString] String -> IO a -> IO a;
timeit_io = |label, io_a| (
    let time_limit = 0.1;  // 100 msec
    let (time, result) = *measure_time_io(time_limit, io_a);
    let (time, unit) = if time >= 1.0 { (time, "sec") }
    else if time >= 1.0e-3 { (time * 1.0e3, "msec") }
    else                   { (time * 1.0e6, "usec") };
    let _ = *eprintln(label + "=" + result.to_string +
                      " time/loop=" + time.to_string_precision(3_U8) + " " + unit);
    pure $ result
);

// Same interface as `timeit()` but does not measure time.
notimeit: [a: ToString] String -> (() -> a) -> IO a;
notimeit = |label, f| (
    let result = f();
    let _ = *eprintln(label + "=" + result.to_string);
    pure $ result
);

_repeat_io: IO a -> I64 -> IO a;
_repeat_io = |io_a, n| (
    let result = *io_a;
    if n <= 1 { pure $ result };
    _repeat_io(io_a, n - 1)
);

// Measures wall-clock time per a function call.
// Specifically, It calls the function many times until the specified time limit (in second) passes
// and measures the total time.
// Returns the measured time per loop (in second) and the IO operation result.
// NOTE: The measured time per loop has a overhead about 0.1~1.0 usec.
measure_time: F64 -> (() -> a) -> IO (F64, a);
measure_time = |time_limit, f| (
    let io_a = do {
        pure();;    // make it lazy
        pure $ f()
    };
    measure_time_io(time_limit, io_a)
);

// Measures wall-clock time per an IO operation.
// Specifically, It performs an IO operation many times until the specified time limit (in second) passes
// and measures the total time.
// Returns the measured time per loop (in second) and the IO operation result.
// NOTE: The measured time per loop has a overhead about 0.1~1.0 usec.
measure_time_io: F64 -> IO a -> IO (F64, a);
measure_time_io = |time_limit, io_a| (
    let (result, total_time) = *consumed_realtime_while_io(_repeat_io(io_a, 1));
    let (result, total_time, total_count) = *loop_m(
        (result, total_time, 1, 1), |(result, total_time, total_count, count)|
        if total_time >= time_limit {
            break_m $ (result, total_time, total_count)
        };
        let (result, time) = *consumed_realtime_while_io(_repeat_io(io_a, count));
        let total_time = total_time + time;
        let total_count = total_count + count;
        continue_m $ (result, total_time, total_count, count * 2)
    );
    let time = total_time / total_count.to_F64;
    pure $ (time, result)
);

// Get wall-clock time elapsed while executing an I/O action.
consumed_realtime_while_io : IO a -> IO (a, F64);
consumed_realtime_while_io = |io| (
    let _ = *pure();
    let start = *Time::get_now;
    let result = *io;
    let end = *Time::get_now;
    let time = end.to_F64 - start.to_F64;
    pure $ (result, time)
);
