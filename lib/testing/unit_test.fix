// Unit Test Framework
module Minilib.Testing.UnitTest;

import Time;

// If _TEST_VERBOSE is true, the results of all testcases will be printed.
// If _TEST_VERBOSE is false, the results of only failed testcases will be printed.
//
// If the environment variable `TEST_VERBOSE` is set to non-empty string, _TEST_VERBOSE becomes true.
// For example, running the `TEST_VERBOSE=1 fix test` command at a shell prompt will report all testcases.
_TEST_VERBOSE: Bool;
_TEST_VERBOSE = do {
    let name = "TEST_VERBOSE";
    let p_value = *name.borrow_c_str_io(|p_name|
        FFI_CALL_IO[Ptr getenv(Ptr), p_name]
    );
    let value = if p_value == nullptr { "" } else { String::_unsafe_from_c_str_ptr(p_value) };
    if value != "" {
        pure $ true
    };
    pure $ false
}.unsafe_perform;

// TestCase is a type that counts the number of successful and failed tests.
type TestCase = Lazy (IOFail (I64, I64));

namespace TestCase {
    // A test case where the number of successes and number of failures are both equal to 0.
    // Can be used as a placeholder at the end of an array of test cases.
    empty: TestCase;
    empty = |_| pure $ (0, 0);
}

type TestSuite = Array (String, IO ()); 

namespace TestSuite {
    run: TestSuite -> IO ();
    run = |testsuite| (
        testsuite.to_iter.fold_m(
            (), |(name, io), _|
            println("=== " + name + " ===");;
            io
        )
    );
}

// Executes all test cases. This function:
// - Sets `stdout` and `stderr` to be unbuffered for immediate output.
// - Runs all test cases.
// - Prints a summary of the results, including the number of passed and failed tests.
// - If any test case fails or an error occurs, prints the error message and aborts the program.
// - If all test cases passed, returns `pure()`.
run_test_driver: Array TestCase -> IO ();
run_test_driver = |tests| (
    do {
        // make stdout & stderr unbuffered
        FFI_CALL_IO[() setbuf(Ptr, Ptr), IO::stdout._file_ptr, nullptr].lift;;
        FFI_CALL_IO[() setbuf(Ptr, Ptr), IO::stderr._file_ptr, nullptr].lift;;

        eprintln ("Starting Test Driver").lift;;
        let start = *Time::get_now.lift;
        let test: TestCase = tests.run_tests;
        let (success, fail) = *test();
        let end = *Time::get_now.lift;
        let time = (end.@sec.to_F64 - start.@sec.to_F64) +
                   (end.@nanosec.to_F64 * 1.0e-9 - start.@nanosec.to_F64 * 1.0e-9);
        eprintln("SUCCESS: " + success.to_string + " FAIL: " + fail.to_string +
                 " TIME: " + time.to_string_precision(3_U8) + " sec").lift;;
        pure $ if fail == 0 { 0 } else { 1 }
    }.try(|err|
        eprintln("FATAL ERROR: " + err);;
        pure $ 1
    )
    .bind(|exitcode|
        // Aborts the program when exitcode != 0
        if exitcode != 0 { 
            undefined("exitcode = " + exitcode.to_string)
        };
        // All tests passed
        pure()
    )
);

// Executes all test cases and treat the results as one test case.
run_tests: Array (TestCase) -> TestCase;
run_tests = |tests, _| (
    tests.to_iter.fold_m(
        (0, 0), |test, (success_total, fail_total)|
        let (success, fail) = *(test());
        pure $ (success_total + success, fail_total + fail)
    )
);

// Creates a named test case from a lazy `IOFail ()`.
make_test: String -> Lazy (IOFail ()) -> TestCase;
make_test = |test_name, body, _| (
    when(_TEST_VERBOSE, eprintln("=== " + test_name + " ===").lift);;
    do {
        body();;
        when(_TEST_VERBOSE, eprintln("[SUCCESS] " + test_name).lift);;
        pure $ (1, 0)
    }.try(|err|
        eprintln("error: " + err);;
        eprintln("[FAIL] " + test_name);;
        pure $ (0, 1)
    ).lift
);

// Creates a set of test cases from parameters and a lazy `IOFail ()`.
make_table_test: [a: ToString] String -> Array a -> (a -> IOFail ()) -> TestCase;
make_table_test = |test_name, params, body| (
    params.map(|param|
        let test_name1 = test_name + ":" + param.to_string;
        make_test(test_name1, |_| body(param))
    ).run_tests
);

//-------------------------
// Assertions for testcases
//-------------------------

// Verifies that the boolean value is true. If the boolean value is false, the test will fail with the specified message.
assert_true : String -> Bool -> IOFail ();
assert_true = |msg, b| (
    if !b {
        throw $ "assert_true: " + msg
    };
    pure()
);

// Verifies that two values are equal. If the values are different, the test will fail with the specified message.
assert_equal : [a: Eq, a: ToString] String -> a -> a -> IOFail ();
assert_equal = |msg, lhs, rhs| (
    if lhs != rhs {
        throw $ "assert_equal: " + msg + ": lhs='" + lhs.to_string + "' rhs='" + rhs.to_string + "'"
    };
    pure()
);

// Verifies that two values are not equal. If the values are equal, the test will fail with the specified message.
assert_not_equal : [a: Eq, a: ToString] String -> a -> a -> IOFail ();
assert_not_equal = |msg, lhs, rhs| (
    if lhs == rhs {
        throw $ "assert_not_equal: " + msg + ": lhs='" + lhs.to_string + "' rhs='" + rhs.to_string + "'"
    };
    pure()
);
