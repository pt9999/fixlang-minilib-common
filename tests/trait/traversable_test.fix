
module TraversableTest;

import Minilib.Trait.Traversable;
import Minilib.Testing.UnitTest;

test_array_sequence: TestCase;
test_array_sequence = (
    make_test("test_array_sequence") $ |_|
    let arr: Array (Result ErrMsg I64) = [ok(1),ok(2),ok(3)];
    let res: Result ErrMsg (Array I64) = arr.sequence;
    assert_equal("eq", ok $ [1, 2, 3], res);;
    let arr: Array (Result ErrMsg I64) = [ok(1),err("err"),ok(3)];
    let res: Result ErrMsg (Array I64) = arr.sequence;
    assert_equal("eq", err("err"), res);;
    let arr: Array (IOFail I64) = [pure(1),pure(2),pure(3)];
    let res: Result ErrMsg (Array I64) = *arr.sequence.to_result.lift;
    assert_equal("eq", ok $ [1, 2, 3], res);;
    let arr: Array (IOFail I64) = [pure(1),throw("err"),pure(3)];
    let res: Result ErrMsg (Array I64) = *arr.sequence.to_result.lift;
    assert_equal("eq", err("err"), res);;
    pure()
);

test_array_traverse: TestCase;
test_array_traverse = (
    make_test("test_array_traverse") $ |_|
    let arr: Array I64 = [1,2,3];
    let opt: Option (Array I64) = arr.traverse(|i| some(i));
    assert_equal("eq", some $ [1, 2, 3], opt);;
    let arr: Array I64 = [1,2,3];
    let opt: Option (Array I64) = arr.traverse(|i| if i % 2 == 0 { none() } else { some(i) });
    assert_equal("eq", none(), opt);;
    pure()
);

test_array_map_m: TestCase;
test_array_map_m = (
    make_test("test_array_map_m") $ |_|
    let arr: Array I64 = [1,2,3];
    let iof: IOFail (Array I64) = arr.map_m(|i| pure(i + 1));
    let arr = *iof;
    assert_equal("eq", [2, 3, 4], arr);;
    pure()
);

test_array_foreach_m: TestCase;
test_array_foreach_m = (
    make_test("test_array_foreach_m") $ |_|
    let arr: Array I64 = [1,2,3];
    arr.foreach_m(|i|
        println(i.to_string).lift
    );;
    pure()
);

test_iterator_sequence: TestCase;
test_iterator_sequence = (
    make_test("test_iterator_sequence") $ |_|
    let iter: DynIterator (Result ErrMsg I64) = [ok(1),ok(2),ok(3)].to_iter.to_dyn;
    let res: Result ErrMsg (DynIterator I64) = iter.sequence;
    assert_equal("eq", ok $ [1, 2, 3], res.map(to_array));;
    let iter: DynIterator (Result ErrMsg I64) = [ok(1),err("err"),ok(3)].to_iter.to_dyn;
    let res: Result ErrMsg (DynIterator I64) = iter.sequence;
    assert_equal("eq", err("err"), res.map(to_array));;
    let iter: DynIterator (IOFail I64) = [pure(1),pure(2),pure(3)].to_iter.to_dyn;
    let res: Result ErrMsg (DynIterator I64) = *iter.sequence.to_result.lift;
    assert_equal("eq", ok $ [1, 2, 3], res.map(to_array));;
    let iter: DynIterator (IOFail I64) = [pure(1),throw("err"),pure(3)].to_iter.to_dyn;
    let res: Result ErrMsg (DynIterator I64) = *iter.sequence.to_result.lift;
    assert_equal("eq", err("err"), res.map(to_array));;
    pure()
);

test_option_sequence: TestCase;
test_option_sequence = (
    make_test("test_option_sequence") $ |_|
    let opt: Option (Result ErrMsg I64) = some $ ok $ 1;
    let res: Result ErrMsg (Option I64) = opt.sequence;
    assert_equal("eq", ok $ some $ 1, res);;
    let opt: Option (Result ErrMsg I64) = some $ err $ "err";
    let res: Result ErrMsg (Option I64) = opt.sequence;
    assert_equal("eq", err $ "err", res);;
    let opt: Option (Result ErrMsg I64) = none();
    let res: Result ErrMsg (Option I64) = opt.sequence;
    assert_equal("eq", ok $ none(), res);;
    pure()
);

test_result_sequence: TestCase;
test_result_sequence = (
    make_test("test_result_sequence") $ |_|
    let res: Result ErrMsg (Option I64) = ok $ some $ 1;
    let opt: Option (Result ErrMsg I64) = res.sequence;
    assert_equal("eq", some $ ok $ 1, opt);;
    let res: Result ErrMsg (Option I64) = ok $ none();
    let opt: Option (Result ErrMsg I64) = res.sequence;
    assert_equal("eq", none(), opt);;
    let res: Result ErrMsg (Option I64) = err $ "err";
    let opt: Option (Result ErrMsg I64) = res.sequence;
    assert_equal("eq", some $ err $ "err", opt);;
    pure()
);
// TODO: add tests

main: IO ();
main = (
    [
        test_array_sequence,
        test_array_traverse,
        test_array_map_m,
        test_array_foreach_m,
        test_iterator_sequence,
        test_option_sequence,
        test_result_sequence,
    ]
    .run_test_driver
);
